:py:mod:`step.modules.decoder`
==============================

.. py:module:: step.modules.decoder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   step.modules.decoder.Exp
   step.modules.decoder.ProbDecoder




.. py:class:: Exp


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(input)



.. py:class:: ProbDecoder(input_dim=3000, hidden_dim=128, n_hidden_layers=1, output_dim=64, norm='batch', dist='zinb', skip_dim=0, use_skip=False, num_batches: int = 1, use_l_scale: bool = False, activation: Literal[softplus, softmax] | None = None)


   Bases: :py:obj:`torch.nn.Module`

   ProbDecoder is a probabilistic decoder to estimate the parameters of the output distribution(zinb or nb).

   .. attribute:: args

      The arguments to initialize the model.

      :type: dict

   .. py:method:: forward(z, library, batch_label=None, z_=None)

      Forward pass of the ProbDecoder.

      :param z: The input tensor.
      :type z: torch.Tensor
      :param library: The library size.
      :type library: torch.Tensor
      :param z_: The input tensor of the skip connection. Default is None.
      :type z_: torch.Tensor

      :returns: The rate of the output distribution.
                torch.Tensor: The dropout of the output distribution.
                torch.Tensor: The scale of the output distribution.
      :rtype: torch.Tensor


   .. py:method:: ffn_(z, z_=None)

      Forward pass of the feedforward network.

      :param z: The input tensor.
      :type z: torch.Tensor
      :param z_: The input tensor of the skip connection. Default is None.
      :type z_: torch.Tensor

      :returns: The output tensor.
      :rtype: torch.Tensor


   .. py:method:: dropout_(z, z_=None)

      Dropout logoit of the output distribution.

      :param z: The input tensor.
      :type z: torch.Tensor
      :param z_: The input tensor of the skip connection. Default is None.
      :type z_: torch.Tensor

      :returns: The dropout logit of the output distribution.
      :rtype: torch.Tensor


   .. py:method:: copy(with_param=True)

      Copy the model.

      :param with_param: Whether to copy the parameters. Default is True.
      :type with_param: bool

      :returns: The copied model.
      :rtype: ProbDecoder



