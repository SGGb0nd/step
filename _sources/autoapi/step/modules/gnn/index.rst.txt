:py:mod:`step.modules.gnn`
==========================

.. py:module:: step.modules.gnn


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   step.modules.gnn.GAT
   step.modules.gnn.GCN




.. py:class:: GAT(in_feats, h_feats, n_layers=3, n_heads=4)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(g, in_feat)



.. py:class:: GCN(in_feats, h_feats, n_layers=3, with_edge=True)


   Bases: :py:obj:`torch.nn.Module`

   GCN is a graph convolutional network.

   .. attribute:: in_feats

      The input feature dimension.

      :type: int

   .. attribute:: h_feats

      The hidden feature dimension.

      :type: int

   .. attribute:: n_layers

      The number of layers.

      :type: int

   .. attribute:: with_edge

      Whether to use edge features.

      :type: bool

   .. py:method:: forward(g, in_feat)



